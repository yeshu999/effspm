name: Build & Publish Wheels

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'      # publish on tags like v0.2.6
  pull_request:
    branches: [ main ]

# Needed for PyPI Trusted Publisher (OIDC)
permissions:
  contents: read
  id-token: write

jobs:
  build_wheels:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, windows-2022, macos-14]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # so tags/history are available if needed

      - name: Set up Python (host)
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          python -m pip install cibuildwheel==2.20.0 build

      # macOS/Linux build (Bash + pipefail)
      - name: Build wheels (macOS/Linux)
        if: runner.os != 'Windows'
        shell: bash
        env:
          CIBW_BUILD: "cp39-* cp310-* cp311-* cp312-*"
          CIBW_SKIP: "pp* *-musllinux_*"
          CIBW_ARCHS_LINUX: "x86_64 i686"
          CIBW_ARCHS_MACOS: "x86_64 arm64"
          CIBW_BUILD_VERBOSITY: "3"
          CIBW_TEST_COMMAND: "python -c \"import effspm; print('import ok')\""
          # Pin setuptools==74.* so wheels emit Metadata-Version: 2.3
          CIBW_BEFORE_BUILD_LINUX: "python -m pip install -U pip wheel setuptools==74.* pybind11 cmake ninja"
          CIBW_BEFORE_BUILD_MACOS: "python -m pip install -U pip wheel setuptools==74.* pybind11 cmake ninja"
        run: |
          set -euo pipefail
          python -m cibuildwheel --output-dir wheelhouse 2>&1 | tee cibw-${{ matrix.os }}.log
          # Build sdist once on Linux so users can fall back if needed
          if [ "$RUNNER_OS" = "Linux" ]; then
            python -m pip install -U pip wheel setuptools==74.* build
            python -m build --sdist --outdir wheelhouse
          fi

      # Windows build (PowerShell) â€” AMD64 only
      - name: Build wheels (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        env:
          CIBW_BUILD: "cp39-* cp310-* cp311-* cp312-*"
          CIBW_SKIP: "pp* *-win32"
          CIBW_ARCHS_WINDOWS: "AMD64"
          CIBW_BUILD_VERBOSITY: "3"
          CIBW_TEST_COMMAND: "python -c \"import effspm; print('import ok')\""
          # Pin setuptools==74.* on Windows too
          CIBW_BEFORE_BUILD_WINDOWS: "python -m pip install -U pip wheel setuptools==74.* pybind11 cmake ninja"
        run: |
          $ErrorActionPreference = 'Stop'
          $PSNativeCommandUseErrorActionPreference = $true
          python -m cibuildwheel --output-dir wheelhouse *>&1 | Tee-Object "cibw-${{ matrix.os }}.log"

      - name: Upload artifacts (wheels/sdist)
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-${{ matrix.os }}
          path: |
            wheelhouse/*.whl
            wheelhouse/*.tar.gz
          if-no-files-found: error

      - name: Upload build log
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: build-log-${{ matrix.os }}
          path: cibw-${{ matrix.os }}.log

  publish:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build_wheels]
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Download all artifacts (merge)
        uses: actions/download-artifact@v4
        with:
          pattern: artifacts-*
          merge-multiple: true
          path: dist

      # Optional sanity check prior to upload
      - name: Twine check (optional)
        run: |
          python -m pip install -U pip
          python -m pip install twine
          python -m twine check dist/*

      # Publish to PyPI via Trusted Publisher (OIDC). No tokens used.
      - name: Publish to PyPI (Trusted Publisher)
        uses: pypa/gh-action-pypi-publish@v1.12.3
        with:
          packages-dir: dist
          skip-existing: true
          verify-metadata: false
