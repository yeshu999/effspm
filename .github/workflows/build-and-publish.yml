name: Build & Publish Wheels

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'      # publish on tags like v0.2.6
  pull_request:
    branches: [ main ]

jobs:
  build_wheels:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, windows-2022, macos-14]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # so tags/history are available if needed

      - name: Set up Python (host)
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          python -m pip install cibuildwheel==2.20.0 build

      # macOS/Linux build (Bash + pipefail)
      - name: Build wheels (macOS/Linux)
        if: runner.os != 'Windows'
        shell: bash
        env:
          CIBW_BUILD: "cp39-* cp310-* cp311-* cp312-*"
          CIBW_SKIP: "pp* *-musllinux_*"
          CIBW_ARCHS_LINUX: "x86_64 i686"
          CIBW_ARCHS_MACOS: "x86_64 arm64"
          CIBW_BUILD_VERBOSITY: "3"
          CIBW_TEST_COMMAND: "python -c \"import effspm; print('import ok')\""
          # Pin setuptools==74.* so wheels emit Metadata-Version: 2.3
          CIBW_BEFORE_BUILD_LINUX: "python -m pip install -U pip wheel setuptools==74.* pybind11 cmake ninja"
          CIBW_BEFORE_BUILD_MACOS: "python -m pip install -U pip wheel setuptools==74.* pybind11 cmake ninja"
        run: |
          set -euo pipefail
          python -m cibuildwheel --output-dir wheelhouse 2>&1 | tee cibw-${{ matrix.os }}.log
          # Build sdist once on Linux so users can fall back if needed
          if [ "$RUNNER_OS" = "Linux" ]; then
            python -m pip install -U pip wheel setuptools==74.* build
            python -m build --sdist --outdir wheelhouse
          fi

      # Windows build (PowerShell) â€” AMD64 only
      - name: Build wheels (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        env:
          CIBW_BUILD: "cp39-* cp310-* cp311-* cp312-*"
          CIBW_SKIP: "pp* *-win32"
          CIBW_ARCHS_WINDOWS: "AMD64"
          CIBW_BUILD_VERBOSITY: "3"
          CIBW_TEST_COMMAND: "python -c \"import effspm; print('import ok')\""
          # Pin setuptools==74.* on Windows too
          CIBW_BEFORE_BUILD_WINDOWS: "python -m pip install -U pip wheel setuptools==74.* pybind11 cmake ninja"
        run: |
          $ErrorActionPreference = 'Stop'
          $PSNativeCommandUseErrorActionPreference = $true
          python -m cibuildwheel --output-dir wheelhouse *>&1 | Tee-Object "cibw-${{ matrix.os }}.log"

      - name: Upload artifacts (wheels/sdist)
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-${{ matrix.os }}
          path: |
            wheelhouse/*.whl
            wheelhouse/*.tar.gz
          if-no-files-found: error

      - name: Upload build log
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: build-log-${{ matrix.os }}
          path: cibw-${{ matrix.os }}.log

  publish:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build_wheels]
    runs-on: ubuntu-22.04
    steps:
      - name: Download all artifacts (merge)
        uses: actions/download-artifact@v4
        with:
          pattern: artifacts-*
          merge-multiple: true
          path: dist

      - name: Inspect downloaded files
        run: |
          ls -lah dist || true

      - name: Install upload tooling (pinned safe versions)
        run: |
          python -m pip install -U pip
          python -m pip install twine==6.0.1 pkginfo==1.12.0


      - name: Show Twine/pkginfo versions
        run: |
          python - <<'PY'
          import pkginfo, subprocess, sys
          print("pkginfo version:", pkginfo.__version__)
          subprocess.check_call([sys.executable, "-m", "twine", "--version"])
          PY

      - name: Show Metadata-Version, Name, Version for each artifact
        run: |
          python - <<'PY'
          import zipfile, tarfile, glob, re
          def show_wheel(path):
              with zipfile.ZipFile(path) as z:
                  meta = [n for n in z.namelist() if n.endswith(".dist-info/METADATA")]
                  if not meta:
                      print(f"{path}: NO METADATA"); return
                  text = z.read(meta[0]).decode(errors="replace")
                  def g(k):
                      m = re.search(rf'^{k}:\s*(.*)$', text, re.M)
                      return m.group(1) if m else "MISSING"
                  print(f"{path}: MV={g('Metadata-Version')} Name={g('Name')} Version={g('Version')}")
          def show_sdist(path):
              with tarfile.open(path, "r:gz") as t:
                  members = [m for m in t.getmembers() if m.name.endswith("PKG-INFO")]
                  if not members:
                      print(f"{path}: NO PKG-INFO"); return
                  data = t.extractfile(members[0]).read().decode(errors="replace")
                  def g(k):
                      m = re.search(rf'^{k}:\s*(.*)$', data, re.M)
                      return m.group(1) if m else "MISSING"
                  print(f"{path}: MV={g('Metadata-Version')} Name={g('Name')} Version={g('Version')}")
          for p in sorted(glob.glob("dist/*.whl")): show_wheel(p)
          for p in sorted(glob.glob("dist/*.tar.gz")): show_sdist(p)
          PY

      - name: Force Metadata-Version to 2.3 (only if needed)
        run: |
          python - <<'PY'
          import zipfile, tarfile, glob, re, io, os
          patched = 0
          for wh in glob.glob("dist/*.whl"):
              with zipfile.ZipFile(wh) as zin:
                  meta = [n for n in zin.namelist() if n.endswith(".dist-info/METADATA")]
                  if not meta: 
                      continue
                  text = zin.read(meta[0]).decode(errors="replace")
                  if re.search(r'^Metadata-Version:\s*2\.4\b', text, re.M):
                      tmp = wh + ".tmp"
                      with zipfile.ZipFile(tmp, "w", compression=zipfile.ZIP_DEFLATED) as zout:
                          for item in zin.infolist():
                              data = zin.read(item.filename)
                              if item.filename.endswith(".dist-info/METADATA"):
                                  data = re.sub(br'^Metadata-Version:\s*.*$', b'Metadata-Version: 2.3', data, flags=re.M)
                              zout.writestr(item, data)
                      os.replace(tmp, wh)
                      patched += 1
                      print("Patched wheel:", wh)
          for sd in glob.glob("dist/*.tar.gz"):
              with tarfile.open(sd, "r:gz") as tin:
                  members = [m for m in tin.getmembers() if m.name.endswith("PKG-INFO")]
                  if not members: 
                      continue
                  data = tin.extractfile(members[0]).read()
                  if re.search(br'^Metadata-Version:\s*2\.4\b', data, re.M):
                      tmp = sd + ".tmp"
                      with tarfile.open(tmp, "w:gz") as tout:
                          for m in tin.getmembers():
                              f = tin.extractfile(m) if m.isfile() else None
                              buf = f.read() if f else None
                              if m.name.endswith("PKG-INFO") and buf is not None:
                                  buf = re.sub(br'^Metadata-Version:\s*.*$', b'Metadata-Version: 2.3', buf, flags=re.M)
                                  m.size = len(buf)
                                  tout.addfile(m, io.BytesIO(buf))
                              else:
                                  tout.addfile(m, io.BytesIO(buf) if buf is not None else None)
                      os.replace(tmp, sd)
                      patched += 1
                      print("Patched sdist:", sd)
          print("Patched files:", patched)
          PY

      - name: Twine check (after potential patch)
        run: python -m twine check dist/*

      - name: Upload via Twine (skip duplicates)
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN8 }}
        run: python -m twine upload --skip-existing dist/*
