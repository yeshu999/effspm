name: Build & Publish Wheels

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'         # publish only when pushing a tag like v0.2.6
  pull_request:
    branches: [ main ]

jobs:
  build_wheels:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, windows-2022, macos-14]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python (host)
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install cibuildwheel
        run: |
          python -m pip install --upgrade pip
          python -m pip install cibuildwheel==2.20.0

      # macOS / Linux build
      - name: Build wheels (macOS/Linux)
        if: runner.os != 'Windows'
        shell: bash
        env:
          CIBW_BUILD: "cp39-* cp310-* cp311-* cp312-*"
          CIBW_SKIP: "pp* *-musllinux_*"
          CIBW_ARCHS_LINUX: "x86_64"
          CIBW_ARCHS_MACOS: "x86_64 arm64"
          CIBW_BUILD_VERBOSITY: "3"
          CIBW_TEST_COMMAND: "python -c \"import effspm; print('import ok')\""
          CIBW_BEFORE_BUILD_LINUX: "python -m pip install -U pip wheel setuptools pybind11 cmake ninja"
          CIBW_BEFORE_BUILD_MACOS: "python -m pip install -U pip wheel setuptools pybind11 cmake ninja"
        run: |
          set -euo pipefail
          python -m cibuildwheel --output-dir wheelhouse 2>&1 | tee cibw-${{ matrix.os }}.log

      # Windows build
      - name: Build wheels (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        env:
          CIBW_BUILD: "cp39-* cp310-* cp311-* cp312-*"
          CIBW_SKIP: "pp* *-win32"
          CIBW_ARCHS_WINDOWS: "AMD64"
          CIBW_BUILD_VERBOSITY: "3"
          CIBW_TEST_COMMAND: "python -c \"import effspm; print('import ok')\""
          CIBW_BEFORE_BUILD_WINDOWS: "python -m pip install -U pip wheel setuptools pybind11 cmake ninja"
        run: |
          $ErrorActionPreference = 'Stop'
          $PSNativeCommandUseErrorActionPreference = $true
          python -m cibuildwheel --output-dir wheelhouse *>&1 | Tee-Object "cibw-${{ matrix.os }}.log"

      - name: Upload wheels as artifact
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: wheelhouse/*.whl

      - name: Upload build log
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: build-log-${{ matrix.os }}
          path: cibw-${{ matrix.os }}.log

  verify_wheels:
    needs: [build_wheels]
    runs-on: ubuntu-22.04
    steps:
      - name: Download wheel artifacts (merged)
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: dist
          merge-multiple: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install verification tools
        run: |
          python -m pip install --upgrade pip
          python -m pip install twine

      # Remove any broken wheels (no METADATA or missing Name/Version)
      - name: Drop wheels missing METADATA/Name/Version
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          mkdir -p tmpm
          kept=0
          for whl in dist/*.whl; do
            echo "== Checking $whl"
            if ! unzip -p "$whl" '*/*.dist-info/METADATA' > tmpm/M 2>/dev/null; then
              echo "   -- Removing: no METADATA"
              rm -f "$whl"
              continue
            fi
            if ! grep -q '^Name:' tmpm/M; then
              echo "   -- Removing: Name missing in METADATA"
              rm -f "$whl"
              continue
            fi
            if ! grep -q '^Version:' tmpm/M; then
              echo "   -- Removing: Version missing in METADATA"
              rm -f "$whl"
              continue
            fi
            kept=$((kept+1))
          done
          rm -rf tmpm
          if [ $kept -eq 0 ]; then
            echo "No valid wheels remain after verification."
            exit 1
          fi

      - name: Twine check
        run: python -m twine check dist/*.whl

      - name: Sanity install & import test for each wheel
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          for whl in dist/*.whl; do
            echo "=== Testing $whl ==="
            python -m venv .venv_test
            . .venv_test/bin/activate
            python -m pip install --upgrade pip
            python -m pip install --no-deps "$whl"
            python -c 'import effspm; print("import ok:", getattr(effspm, "__version__", "no __version__"))'
            deactivate
            rm -rf .venv_test
          done

      - name: Upload verified wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-verified
          path: dist/*.whl

  publish:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [verify_wheels]
    runs-on: ubuntu-22.04
    steps:
      - name: Download verified wheels
        uses: actions/download-artifact@v4
        with:
          name: wheels-verified
          path: dist

      - name: Publish to PyPI (wheels only)
        uses: pypa/gh-action-pypi-publish@v1.10.3
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN7 }}   # make sure this secret exists in your repo
          packages-dir: dist
          verify-metadata: true
          skip-existing: true
