name: Build & Publish Wheels

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

jobs:
  build_wheels:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, windows-2022, macos-14]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python (host)
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install cibuildwheel
        run: |
          python -m pip install --upgrade pip
          python -m pip install cibuildwheel==2.20.0

      - name: Build wheels (macOS/Linux)
        if: runner.os != 'Windows'
        shell: bash
        env:
          CIBW_BUILD: "cp39-* cp310-* cp311-* cp312-*"
          CIBW_SKIP: "pp* *-musllinux_*"
          CIBW_ARCHS_LINUX: "x86_64"        # keep simple for now
          CIBW_ARCHS_MACOS: "x86_64 arm64"
          CIBW_BUILD_VERBOSITY: "3"
          CIBW_TEST_COMMAND: "python -c \"import effspm; print('import ok')\""
          CIBW_BEFORE_BUILD_LINUX: "python -m pip install -U pip wheel setuptools pybind11 cmake ninja"
          CIBW_BEFORE_BUILD_MACOS: "python -m pip install -U pip wheel setuptools pybind11 cmake ninja"
        run: |
          set -euo pipefail
          python -m cibuildwheel --output-dir wheelhouse 2>&1 | tee cibw-${{ matrix.os }}.log

      - name: Build wheels (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        env:
          CIBW_BUILD: "cp39-* cp310-* cp311-* cp312-*"
          CIBW_SKIP: "pp* *-win32"
          CIBW_ARCHS_WINDOWS: "AMD64"
          CIBW_BUILD_VERBOSITY: "3"
          CIBW_TEST_COMMAND: "python -c \"import effspm; print('import ok')\""
          CIBW_BEFORE_BUILD_WINDOWS: "python -m pip install -U pip wheel setuptools pybind11 cmake ninja"
        run: |
          $ErrorActionPreference = 'Stop'
          $PSNativeCommandUseErrorActionPreference = $true
          python -m cibuildwheel --output-dir wheelhouse *>&1 | Tee-Object "cibw-${{ matrix.os }}.log"

      - name: Upload wheels as artifact
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: wheelhouse/*.whl

      - name: Upload build log
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: build-log-${{ matrix.os }}
          path: cibw-${{ matrix.os }}.log

  verify_wheels:
    needs: [build_wheels]
    runs-on: ubuntu-22.04
    steps:
      - name: Download wheel artifacts (merge)
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: dist
          merge-multiple: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install verification tools
        run: |
          python -m pip install --upgrade pip
          python -m pip install twine

      - name: Quick list
        run: |
          ls -lh dist/*.whl

      - name: Check METADATA (Name/Version) and drop any broken wheels
        shell: bash
        run: |
          python - <<'PY'
          import sys, zipfile, pathlib, re, os
          bad = []
          for whl in pathlib.Path('dist').glob('*.whl'):
            try:
              with zipfile.ZipFile(whl) as zf:
                metas = [n for n in zf.namelist() if n.endswith('.dist-info/METADATA')]
                if not metas:
                  print(f'!! {whl.name}: no METADATA file')
                  bad.append(whl); continue
                data = zf.read(metas[0]).decode('utf-8', 'replace')
                name = re.search(r'^Name:\s*(.+)$', data, re.M)
                vers = re.search(r'^Version:\s*(.+)$', data, re.M)
                print(f'== {whl.name}: Name={name.group(1) if name else "MISSING"}, Version={vers.group(1) if vers else "MISSING"}')
                if not name or not vers:
                  bad.append(whl)
            except zipfile.BadZipFile:
              print(f'!! {whl.name}: Bad zip (corrupt)')
              bad.append(whl)
          for b in bad:
            print(f'-- Removing invalid wheel: {b.name}')
            os.remove(b)
          if bad:
            print(f'Removed {len(bad)} invalid wheel(s)')
          remaining = list(pathlib.Path('dist').glob('*.whl'))
          if not remaining:
            print('No valid wheels remain after verification'); sys.exit(1)
          PY

      - name: Twine check (structure/metadata)
        run: |
          python -m twine check dist/*.whl

  publish:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [verify_wheels]
    runs-on: ubuntu-22.04
    steps:
      - name: Download verified wheels
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: dist
          merge-multiple: true

      - name: Publish to PyPI (wheels only)
        uses: pypa/gh-action-pypi-publish@v1.10.3
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN7 }}
          packages-dir: dist
          verify-metadata: true
          skip-existing: true
