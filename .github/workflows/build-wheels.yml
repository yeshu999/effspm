name: Build & Publish Wheels

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'      # publish on tags like v0.2.4
  pull_request:
    branches: [ main ]

jobs:
  build_wheels:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, windows-2022, macos-14]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python (host)
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install cibuildwheel
        run: |
          python -m pip install --upgrade pip
          python -m pip install cibuildwheel==2.20.0

      # macOS/Linux build (Bash + pipefail)
      - name: Build wheels (macOS/Linux)
        if: runner.os != 'Windows'
        shell: bash
        env:
          CIBW_BUILD: "cp39-* cp310-* cp311-* cp312-*"
          CIBW_SKIP: "pp* *-musllinux_*"
          # Keep linux simple & reliable: x86_64 only (drop 32-bit i686)
          CIBW_ARCHS_LINUX: "x86_64"
          CIBW_ARCHS_MACOS: "x86_64 arm64"
          CIBW_BUILD_VERBOSITY: "3"
          CIBW_TEST_COMMAND: "python -c \"import effspm; print('import ok')\""
          # Build tools INSIDE cibuildwheel’s isolated env
          CIBW_BEFORE_BUILD_LINUX: "python -m pip install -U pip wheel setuptools pybind11 cmake ninja"
          CIBW_BEFORE_BUILD_MACOS: "python -m pip install -U pip wheel setuptools pybind11 cmake ninja"
        run: |
          set -euo pipefail
          python -m cibuildwheel --output-dir wheelhouse 2>&1 | tee cibw-${{ matrix.os }}.log

      # Windows build (PowerShell) — build AMD64 only, skip win32
      - name: Build wheels (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        env:
          CIBW_BUILD: "cp39-* cp310-* cp311-* cp312-*"
          CIBW_SKIP: "pp* *-win32"
          CIBW_ARCHS_WINDOWS: "AMD64"
          CIBW_BUILD_VERBOSITY: "3"
          CIBW_TEST_COMMAND: "python -c \"import effspm; print('import ok')\""
          CIBW_BEFORE_BUILD_WINDOWS: "python -m pip install -U pip wheel setuptools pybind11 cmake ninja"
        run: |
          $ErrorActionPreference = 'Stop'
          $PSNativeCommandUseErrorActionPreference = $true
          python -m cibuildwheel --output-dir wheelhouse *>&1 | Tee-Object "cibw-${{ matrix.os }}.log"

      - name: Upload wheels as artifact
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: wheelhouse/*.whl

      - name: Upload build log
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: build-log-${{ matrix.os }}
          path: cibw-${{ matrix.os }}.log

  publish:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build_wheels]
    runs-on: ubuntu-22.04
    steps:
      - name: Download wheel artifacts (merge)
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: dist
          merge-multiple: true

      - name: Ensure we have wheels
        run: |
          shopt -s nullglob
          count=(dist/*.whl)
          if [ ${#count[@]} -eq 0 ]; then
            echo "No wheels found in dist/"
            exit 1
          fi
          ls -lh dist

      - name: Verify wheels contain METADATA (Name/Version)
        shell: bash
        run: |
          python - <<'PY'
          import sys, zipfile, pathlib, re
          bad = 0
          for whl in pathlib.Path('dist').glob('*.whl'):
              print(f'== Checking {whl.name}')
              try:
                  with zipfile.ZipFile(whl) as zf:
                      metas = [n for n in zf.namelist() if n.endswith('.dist-info/METADATA')]
                      if not metas:
                          print('!! No METADATA file found')
                          bad += 1
                          continue
                      data = zf.read(metas[0]).decode('utf-8', 'replace')
                      name = re.search(r'^Name:\s*(.+)$', data, re.M)
                      vers = re.search(r'^Version:\s*(.+)$', data, re.M)
                      print('   Name   =', name.group(1) if name else 'MISSING')
                      print('   Version=', vers.group(1) if vers else 'MISSING')
                      if not name or not vers:
                          bad += 1
              except zipfile.BadZipFile:
                  print('!! BadZipFile: wheel is corrupted')
                  bad += 1
          sys.exit(bad)
          PY

      - name: Publish to PyPI (wheels only)
        uses: pypa/gh-action-pypi-publish@v1.10.3
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN7 }}  # <-- ensure this secret exists
          packages-dir: dist
          verify-metadata: true
          skip-existing: true
