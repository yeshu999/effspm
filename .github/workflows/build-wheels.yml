name: Build & Publish Wheels

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'          # only publishes on tags like v0.2.4
  pull_request:
    branches: [ main ]

jobs:
  build_wheels:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, windows-2022, macos-14]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python (host)
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install cibuildwheel
        run: |
          python -m pip install --upgrade pip
          python -m pip install cibuildwheel==2.20.0

      # --- macOS / Linux ---
      - name: Build wheels (macOS/Linux)
        if: runner.os != 'Windows'
        shell: bash
        env:
          # Build only mainstream CPython ABIs for now
          CIBW_BUILD: "cp39-* cp310-* cp311-* cp312-*"
          CIBW_SKIP: "pp* *-musllinux_*"

          # Linux: x86_64 only (i686 is fragile unless you really need it)
          CIBW_ARCHS_LINUX: "x86_64"
          # macOS: build a single universal2 wheel (works on Intel + Apple Silicon)
          CIBW_ARCHS_MACOS: "universal2"

          # Use a modern baseline on macOS to avoid ancient SDK quirks
          CIBW_ENVIRONMENT_MACOS: "MACOSX_DEPLOYMENT_TARGET=11.0 CXXFLAGS='-std=c++17'"

          # Force C++17 and make sure compilers exist in the isolated envs
          CIBW_ENVIRONMENT_LINUX: "CXXFLAGS='-std=c++17' CC=gcc CXX=g++"
          CIBW_BEFORE_BUILD_LINUX: "python -m pip install -U pip wheel setuptools pybind11 cmake ninja"
          CIBW_BEFORE_BUILD_MACOS: "python -m pip install -U pip wheel setuptools pybind11 cmake ninja"

          CIBW_BUILD_VERBOSITY: "3"
          CIBW_TEST_COMMAND: "python -c \"import effspm; print('import ok')\""
        run: |
          set -euo pipefail
          python -m cibuildwheel --output-dir wheelhouse 2>&1 | tee cibw-${{ matrix.os }}.log

      # --- Windows ---
      - name: Build wheels (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        env:
          CIBW_BUILD: "cp39-* cp310-* cp311-* cp312-*"
          CIBW_SKIP: "pp*"
          # Helps scikit-build/setuptools-cmake pick a reliable generator
          CIBW_ENVIRONMENT_WINDOWS: "CMAKE_GENERATOR=Ninja"
          CIBW_BEFORE_BUILD_WINDOWS: "python -m pip install -U pip wheel setuptools pybind11 cmake ninja"
          CIBW_BUILD_VERBOSITY: "3"
          CIBW_TEST_COMMAND: "python -c \"import effspm; print('import ok')\""
        run: |
          $ErrorActionPreference = 'Stop'
          $PSNativeCommandUseErrorActionPreference = $true
          python -m cibuildwheel --output-dir wheelhouse *>&1 | Tee-Object "cibw-${{ matrix.os }}.log"

      - name: Upload wheels as artifact
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: wheelhouse/*.whl

      - name: Upload build log
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: build-log-${{ matrix.os }}
          path: cibw-${{ matrix.os }}.log

  publish:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build_wheels]
    runs-on: ubuntu-22.04
    steps:
      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: dist
          merge-multiple: true

      - name: Show files
        run: ls -al dist

      - name: Publish to PyPI (wheels only)
        uses: pypa/gh-action-pypi-publish@v1.10.3
        with:
          password: ${{ secrets.PYPI_API_TOKEN7 }}   # <-- fix your secret name
          packages-dir: dist
