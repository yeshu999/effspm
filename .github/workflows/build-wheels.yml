name: Build & Publish Wheels

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'          # release only when tag starts with v (e.g., v0.2.4)
  pull_request:
    branches: [ main ]

jobs:
  build_linux:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.12' }
      - run: python -m pip install -U pip cibuildwheel==2.20.0
      - name: Build (Linux)
        env:
          CIBW_BUILD: "cp39-* cp310-* cp311-* cp312-*"
          CIBW_SKIP: "pp* *-musllinux_*"
          CIBW_ARCHS_LINUX: "x86_64"        # keep simple first; add i686 later
          CIBW_BUILD_VERBOSITY: "3"
          CIBW_BEFORE_BUILD_LINUX: "python -m pip install -U pip wheel setuptools pybind11 cmake ninja"
          CIBW_TEST_COMMAND: "python -c \"import effspm; print('ok')\""
        shell: bash
        run: |
          set -euo pipefail
          python -m cibuildwheel --output-dir wheelhouse 2>&1 | tee cibw-linux.log
      - uses: actions/upload-artifact@v4
        with:
          name: wheels-linux
          path: wheelhouse/*.whl
      - uses: actions/upload-artifact@v4
        if: ${{ always() }}
        with:
          name: build-log-linux
          path: cibw-linux.log

  build_macos:
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.12' }
      - run: python -m pip install -U pip cibuildwheel==2.20.0
      - name: Build (macOS)
        env:
          CIBW_BUILD: "cp39-* cp310-* cp311-* cp312-*"
          CIBW_SKIP: "pp*"
          CIBW_ARCHS_MACOS: "universal2"     # more reliable than arm64+x86_64 split
          CIBW_BUILD_VERBOSITY: "3"
          CIBW_ENVIRONMENT_MACOS: "MACOSX_DEPLOYMENT_TARGET=11.0"
          CIBW_BEFORE_BUILD_MACOS: "python -m pip install -U pip wheel setuptools pybind11 cmake ninja"
          CIBW_TEST_COMMAND: "python -c \"import effspm; print('ok')\""
        shell: bash
        run: |
          set -euo pipefail
          python -m cibuildwheel --output-dir wheelhouse 2>&1 | tee cibw-macos.log
      - uses: actions/upload-artifact@v4
        with:
          name: wheels-macos
          path: wheelhouse/*.whl
      - uses: actions/upload-artifact@v4
        if: ${{ always() }}
        with:
          name: build-log-macos
          path: cibw-macos.log

  build_windows:
    runs-on: windows-2022
    continue-on-error: true            # donâ€™t block publish; flip to false once stable
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.12' }
      - run: python -m pip install -U pip cibuildwheel==2.20.0
      - name: Build (Windows)
        shell: pwsh
        env:
          CIBW_BUILD: "cp39-* cp310-* cp311-* cp312-*"
          CIBW_SKIP: "pp*"
          CIBW_BUILD_VERBOSITY: "3"
          CIBW_BEFORE_BUILD_WINDOWS: "python -m pip install -U pip wheel setuptools pybind11 cmake ninja"
          CIBW_TEST_COMMAND: "python -c \"import effspm; print('ok')\""
        run: |
          $ErrorActionPreference = 'Stop'
          $PSNativeCommandUseErrorActionPreference = $true
          python -m cibuildwheel --output-dir wheelhouse *>&1 | Tee-Object "cibw-windows.log"
      - uses: actions/upload-artifact@v4
        with:
          name: wheels-windows
          path: wheelhouse/*.whl
      - uses: actions/upload-artifact@v4
        if: ${{ always() }}
        with:
          name: build-log-windows
          path: cibw-windows.log

  publish:
    # Run on tag pushes, regardless of build job outcomes
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}
    needs: [build_linux, build_macos, build_windows]
    runs-on: ubuntu-22.04
    steps:
      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: dist
          merge-multiple: true

      - name: Show files
        run: ls -al dist

      - name: Publish to PyPI (wheels only)
        uses: pypa/gh-action-pypi-publish@v1.10.3
        with:
          password: ${{ secrets.PYPI_API_TOKEN7 }}
          packages-dir: dist
