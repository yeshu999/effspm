name: Build, Test & Publish

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'        # publish on tags like v0.2.6
  pull_request:
    branches: [ main ]

jobs:
  build_wheels:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, macos-14, windows-2022]
    runs-on: ${{ matrix.os }}
    env:
      # Build CPython 3.9â€“3.12 wheels
      CIBW_BUILD: "cp39-* cp310-* cp311-* cp312-*"
      # Skip PyPy and musllinux
      CIBW_SKIP: "pp* *-musllinux_*"
      # Per-OS archs
      CIBW_ARCHS_LINUX: "x86_64"
      CIBW_ARCHS_MACOS: "x86_64 arm64"
      CIBW_ARCHS_WINDOWS: "AMD64"
      # Verbose logs
      CIBW_BUILD_VERBOSITY: "3"
      # Test deps and command (run against the installed wheel)
      CIBW_TEST_REQUIRES: "pytest"
      CIBW_TEST_COMMAND: "pytest -q -k smoke"
      # Ensure build tooling available inside the isolated build env
      CIBW_BEFORE_BUILD_LINUX: "python -m pip install -U pip wheel setuptools pybind11 cmake ninja"
      CIBW_BEFORE_BUILD_MACOS: "python -m pip install -U pip wheel setuptools pybind11 cmake ninja"
      CIBW_BEFORE_BUILD_WINDOWS: "python -m pip install -U pip wheel setuptools pybind11 cmake ninja"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Host Python (for cibuildwheel runner)
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install cibuildwheel
        run: |
          python -m pip install --upgrade pip
          python -m pip install cibuildwheel==2.20.0 build

      - name: Build wheels (+ run tests on each wheel)
        run: |
          python -m cibuildwheel --output-dir dist 2>&1 | tee cibw-${{ matrix.os }}.log

      - name: Build sdist (Linux only)
        if: runner.os == 'Linux'
        run: |
          python -m build --sdist --outdir dist

      - name: Upload artifacts (wheels/sdist)
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-${{ matrix.os }}
          path: |
            dist/*.whl
            dist/*.tar.gz
          if-no-files-found: error

      - name: Upload build log
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: build-log-${{ matrix.os }}
          path: cibw-${{ matrix.os }}.log

  publish:
    name: Publish to PyPI
    needs: [build_wheels]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-22.04
    steps:
      - name: Download all artifacts (merge)
        uses: actions/download-artifact@v4
        with:
          pattern: artifacts-*
          merge-multiple: true
          path: dist

      - name: Twine check (optional sanity)
        run: |
          python -m pip install --upgrade pip
          python -m pip install twine
          python -m twine check dist/*

      - name: Publish
        uses: pypa/gh-action-pypi-publish@v1.10.3
        with:
          packages-dir: dist
          password: ${{ secrets.PYPI_API_TOKEN7 }}   # ensure this secret exists
